{
  "text": "15.1. Evaluation, Denotation, and Result When an expression in a program is evaluated ( executed ), the result denotes one of three things: A variable ( §4.12 ) (in C, this would be called an lvalue ) A value ( §4.2 , §4.3 ) Nothing (the expression is said to be void) If an expression denotes a variable, and a value is required for use in further evaluation, then the value of that variable is used. In this context, if the expression denotes a variable or a value, we may speak simply of the value of the expression. An expression denotes nothing if and only if it is a method invocation ( §15.12 ) that invokes a method that does not return a value, that is, a method declared void ( §8.4 ). Such an expression can be used only as an expression statement ( §14.8 ) or as the single expression of a lambda body ( §15.27.2 ), because every other context in which an expression can appear requires the expression to denote something. An expression statement or lambda body that is a method invocation may also invoke a method that produces a result; in this case the value returned by the method is quietly discarded. Evaluation of an expression can produce side effects, because expressions may contain embedded assignments, increment operators, decrement operators, method invocations, and, in switch expressions, arbitrary statements. An expression occurs in either: The declaration of some class or interface that is being declared: in a field initializer, in a static initializer, in an instance initializer, in a constructor declaration, in a method declaration, or in an annotation. An annotation on the declaration of a module, a package, or a top level class or interface.",
  "metadata": {
    "java_version": "21",
    "section_number": "15.10.2",
    "section_title": "Unknown",
    "chapter_title": "Chapter 15. Expressions"
  },
  "url": "https://docs.oracle.com/javase/specs/jls/se21/html/jls-15.html#jls-15.10.2",
  "section_name": "expressions",
  "downloaded_at": "2025-05-27T13:20:57.711713"
}